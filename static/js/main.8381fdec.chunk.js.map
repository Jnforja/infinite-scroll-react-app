{"version":3,"sources":["serviceWorker.js","InfiniteScroll.js","index.js"],"names":["Boolean","window","location","hostname","match","infiniteScrollReducer","state","action","status","type","imagesUrls","payload","pageNumber","Error","dispatch","fetch","a","res","json","imgs","length","map","i","download_url","initialState","InfiniteScroll","IntersectionObserver","useReducer","useEffect","fetchImages","observeBorder","useCallback","node","entries","forEach","en","intersectionRatio","threshold","observe","url","key","style","imageStyle","src","alt","onClick","data-testid","ref","width","height","display","marginBottom","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDCLN,SAASC,EAAsBC,EAAOC,GACpC,OAAQD,EAAME,QACZ,IAPe,OAQf,IAPgB,QAQd,MAda,gBAcND,EAAOE,KAAP,eACEH,EADF,CACSE,OARA,YASZF,EAEN,IAXkB,UAYhB,MAjBa,gBAiBTC,EAAOE,KACF,eAAKH,EAAZ,CAAmBE,OAdP,UAHD,gBAmBTD,EAAOE,KACF,eAAKH,EAAZ,CAAmBE,OAfJ,aAPF,kBAwBXD,EAAOE,KACF,eACFH,EADL,CAEEI,WAAW,GAAD,mBAAMJ,EAAMI,YAAZ,YAA2BH,EAAOI,QAAQD,aACpDE,WAAYN,EAAMM,WAAa,EAC/BJ,OAzBS,SA4BNF,EACT,IA1BmB,WA2BjB,OAAOA,EACT,QACE,MAAM,IAAIO,MAAM,kB,4CAItB,WAA2BP,EAAOQ,EAAUC,GAA5C,iBAAAC,EAAA,+EAEsBD,EAAM,sCAAD,OACiBT,EAAMM,WADvB,aAF3B,UAKuB,OAHbK,EAFV,QAKYT,OALZ,iCAMyBS,EAAIC,OAN7B,UAO0B,KADdC,EANZ,QAOeC,OAPf,0CAQeN,EAAS,CAAEL,KA9CP,iBAsCnB,iCAUaK,EAAS,CACdL,KAnDa,gBAoDbE,QAAS,CAAED,WAAYS,EAAKE,KAAI,SAAAC,GAAC,OAAIA,EAAEC,oBAZ/C,QAeMT,EAAS,CAAEL,KAtDE,gBAuCnB,0DAkBIK,EAAS,CAAEL,KAzDI,gBAuCnB,2D,sBAsBA,IAAMe,EAAe,CAAEd,WAAY,GAAIF,OA1DpB,OA0DwCI,WAAY,GAEvE,SAASa,EAAT,GAGI,IAAD,IAFDV,aAEC,MAFOd,OAAOc,MAEd,MADDW,4BACC,MADsBzB,OAAOyB,qBAC7B,IACyBC,qBAAWtB,EAAuBmB,GAD3D,mBACMlB,EADN,KACaQ,EADb,KAEDc,qBAAU,WA/DU,YAgEdtB,EAAME,Q,wCACRqB,CAAYvB,EAAOQ,EAAUC,KAE9B,CAACA,EAAOT,IAEX,IAAMwB,EAAgBC,uBACpB,SAAAC,GACe,OAATA,GACF,IAAIN,GACF,SAAAO,GACEA,EAAQC,SAAQ,SAAAC,GACe,IAAzBA,EAAGC,mBACLtB,EAAS,CAAEL,KAnFR,qBAuFT,CAAE4B,UAAW,IACbC,QAAQN,KAGd,CAACN,IAGH,OACE,oCAkBOpB,EAAMI,WAAWW,KAAI,SAAAkB,GAAG,OAC7B,yBAAKC,IAAKD,EAAKE,MAAOC,EAAYC,IAAKJ,EAAKK,IAAI,mBA5GlC,UA2FbtC,EAAME,QAuBP,4BAAQC,KAAK,SAASoC,QAAS,kBAAM/B,EAAS,CAAEL,KAxHnC,kBAwHb,6BAjHgB,YA2FfH,EAAME,QA6BF,yCAvHY,aA2FhBF,EAAME,QAUF,uDAJA,yBAAKsC,cAAY,gBAAgBC,IAAKjB,KA0BjD,IAAMY,EAAa,CACjBM,MAAO,QACPC,OAAQ,QACRC,QAAS,QACTC,aAAc,QCpIhBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC7B,EAAD,OAEF8B,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8381fdec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useCallback } from \"react\";\r\nimport { useReducer } from \"react\";\r\n\r\nconst startFetch = \"START_FETCH\";\r\nconst fetchSuccess = \"FETCH_SUCCESS\";\r\nconst errorFetch = \"FETCH_ERROR\";\r\nconst reachedEnd = \"REACHED_END\";\r\n\r\nconst idleStatus = \"IDLE\";\r\nconst errorStatus = \"ERROR\";\r\nconst loadingStatus = \"LOADING\";\r\nconst finishedStatus = \"FINISHED\";\r\n\r\nfunction infiniteScrollReducer(state, action) {\r\n  switch (state.status) {\r\n    case idleStatus:\r\n    case errorStatus:\r\n      return action.type === startFetch\r\n        ? { ...state, status: loadingStatus }\r\n        : state;\r\n\r\n    case loadingStatus:\r\n      if (action.type === errorFetch) {\r\n        return { ...state, status: errorStatus };\r\n      }\r\n      if (action.type === reachedEnd) {\r\n        return { ...state, status: finishedStatus };\r\n      }\r\n      if (action.type === fetchSuccess) {\r\n        return {\r\n          ...state,\r\n          imagesUrls: [...state.imagesUrls, ...action.payload.imagesUrls],\r\n          pageNumber: state.pageNumber + 1,\r\n          status: idleStatus\r\n        };\r\n      }\r\n      return state;\r\n    case finishedStatus:\r\n      return state;\r\n    default:\r\n      throw new Error(\"Unknown state\");\r\n  }\r\n}\r\n\r\nasync function fetchImages(state, dispatch, fetch) {\r\n  try {\r\n    const res = await fetch(\r\n      `https://picsum.photos/v2/list?page=${state.pageNumber}&limit=5`\r\n    );\r\n    if (res.status === 200) {\r\n      const imgs = await res.json();\r\n      if (imgs.length === 0) {\r\n        return dispatch({ type: reachedEnd });\r\n      }\r\n      return dispatch({\r\n        type: fetchSuccess,\r\n        payload: { imagesUrls: imgs.map(i => i.download_url) }\r\n      });\r\n    } else {\r\n      dispatch({ type: errorFetch });\r\n    }\r\n  } catch (e) {\r\n    dispatch({ type: errorFetch });\r\n  }\r\n}\r\n\r\nconst initialState = { imagesUrls: [], status: idleStatus, pageNumber: 1 };\r\n\r\nfunction InfiniteScroll({\r\n  fetch = window.fetch,\r\n  IntersectionObserver = window.IntersectionObserver\r\n}) {\r\n  const [state, dispatch] = useReducer(infiniteScrollReducer, initialState);\r\n  useEffect(() => {\r\n    if (state.status === loadingStatus) {\r\n      fetchImages(state, dispatch, fetch);\r\n    }\r\n  }, [fetch, state]);\r\n\r\n  const observeBorder = useCallback(\r\n    node => {\r\n      if (node !== null) {\r\n        new IntersectionObserver(\r\n          entries => {\r\n            entries.forEach(en => {\r\n              if (en.intersectionRatio === 1) {\r\n                dispatch({ type: startFetch });\r\n              }\r\n            });\r\n          },\r\n          { threshold: 1 }\r\n        ).observe(node);\r\n      }\r\n    },\r\n    [IntersectionObserver]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {renderImages()}\r\n      {state.status === errorStatus && renderErrorRetryButton()}\r\n      {state.status === loadingStatus && renderLoadingMessage()}\r\n      {state.status === finishedStatus && renderNoMoreImagesMessage()}\r\n      {renderBottomBorder()}\r\n    </>\r\n  );\r\n\r\n  function renderBottomBorder() {\r\n    return <div data-testid=\"bottom-border\" ref={observeBorder} />;\r\n  }\r\n\r\n  function renderNoMoreImagesMessage() {\r\n    return <p>There aren't more images</p>;\r\n  }\r\n\r\n  function renderImages() {\r\n    return state.imagesUrls.map(url => (\r\n      <img key={url} style={imageStyle} src={url} alt=\"from picsum\" />\r\n    ));\r\n  }\r\n\r\n  function renderErrorRetryButton() {\r\n    return (\r\n      <button type=\"button\" onClick={() => dispatch({ type: startFetch })}>\r\n        Error! Click to try again\r\n      </button>\r\n    );\r\n  }\r\n\r\n  function renderLoadingMessage() {\r\n    return <p>Loading...</p>;\r\n  }\r\n}\r\n\r\nconst imageStyle = {\r\n  width: \"300px\",\r\n  height: \"200px\",\r\n  display: \"block\",\r\n  marginBottom: \"20px\"\r\n};\r\nexport { InfiniteScroll };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { InfiniteScroll } from \"./InfiniteScroll\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <InfiniteScroll />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}